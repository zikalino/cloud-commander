item-sources:
  #
  # az
  #
  - type: cloud-azure
    cmd: az group list
    path-id: $[::].id
    path-name: $[::].name
    path-raw: $[::]
    item-type: az-group
    item-type-generic: group

  - type: az-group
    cmd: az resource list --resource-group ${name}
    path-id: $[::].id
    path-name: $[::].name
    path-raw: $[::]
    type: $.type
    type-map:
      - "Microsoft.Compute/virtualMachines": vm

  #
  # civo
  #
  - type: civo-instance-list
    cmd:
      - civo instances list --region fra1 --output json
      - civo instances list --region phx1 --output json
      - civo instances list --region lon1 --output json
      - civo instances list --region nyc1 --output json
    path-id: $[::].id
    path-name: $[::].hostname
    path-raw: $[::]
    item-type: civo-instance
    item-type-generic: vm
  - type: civo-kubernetes-list
    cmd:
      - civo kubernetes list --region lon1 --output json
      - civo kubernetes list --region phx1 --output json
      - civo kubernetes list --region fra1 --output json
      - civo kubernetes list --region nyc1 --output json
    path-id: $[::].id
    path-name: $[::].name
    path-raw: $[::]
    item-type: civo-kubernetes
    item-type-generic: kubernetes
  - type: civo-loadbalancer-list
    cmd:
      - civo loadbalancer list --region lon1 --output json
      - civo loadbalancer list --region phx1 --output json
      - civo loadbalancer list --region fra1 --output json
      - civo loadbalancer list --region nyc1 --output json
    path-id: $[::].id
    path-name: $[::].name
    path-raw: $[::]
    item-type: civo-loadbalancer
    item-type-generic: loadbalancer
  - type: civo-firewall-list
    cmd:
      - civo firewall list --region lon1 --output json
      - civo firewall list --region phx1 --output json
      - civo firewall list --region fra1 --output json
      - civo firewall list --region nyc1 --output json
    path-id: $[::].id
    path-name: $[::].name
    path-raw: $[::]
    item-type: civo-firewall
    item-type-generic: firewall
  - type: civo-apikey-list
    cmd: civo apikey list --region fra1 --output json
    path-id: $[::].name
    path-name: $[::].name
    path-raw: $[::]
    item-type: civo-apikey
    item-type-generic: apikey
  - type:
    cmd:
      - civo database list --region lon1 --output json
      - civo database list --region phx1 --output json
      - civo database list --region fra1 --output json
      - civo database list --region nyc1 --output json
    path-id: $[::].id
    path-name: $[::].name
    path-raw: $[::]
    type: database
  - type:
    cmd:
      - civo domain list --region lon1 --output json
      - civo domain list --region phx1 --output json
      - civo domain list --region fra1 --output json
      - civo domain list --region nyc1 --output json
    path-id: $[::].id
    path-name: $[::].name
    path-raw: $[::]
    type: domain
  - type:
    cmd:
      - civo ip list --region lon1 --output json
      - civo ip list --region phx1 --output json
      - civo ip list --region fra1 --output json
      - civo ip list --region nyc1 --output json
    path-id: $[::].id
    path-name: $[::].name
    path-raw: $[::]
    type: ipaddress
  - type:
    cmd:
      - civo network list --region lon1 --output json
      - civo network list --region phx1 --output json
      - civo network list --region fra1 --output json
      - civo network list --region nyc1 --output json
    path-id: $[::].id
    path-name: $[::].label
    path-raw: $[::]
    type: network
  - type:
    cmd:
      - civo objectstore list --region lon1 --output json
      - civo objectstore list --region phx1 --output json
      - civo objectstore list --region fra1 --output json
      - civo objectstore list --region nyc1 --output json
    path-id: $[::].id
    path-name: $[::].name
    path-raw: $[::]
    type: objectstorage
  - type:
    cmd:
      - civo volume list --region lon1 --output json
      - civo volume list --region phx1 --output json
      - civo volume list --region fra1 --output json
      - civo volume list --region nyc1 --output json
    path-id: $[::].id
    path-name: $[::].name
    path-raw: $[::]
    type: sshkey

  #
  # Digital Ocean
  #
  - type:
    cmd: doctl compute droplet list --output json
    path-id: $[::].id
    path-name: $[::].name
    path-raw: $[::]
    generic-type: vm
    type: doctl-droplet
  - type:
    cmd: doctl compute volume list --output json
    path-id: $[::].id
    path-name: $[::].name
    path-raw: $[::]
    type: disk
  - type:
    cmd: doctl kubernetes cluster list --output json
    path-id: $[::].id
    path-name: $[::].name
    path-raw: $[::]
    type: kubernetes
  - type:
    cmd: doctl apps list --output json
    path-id: $[::].id
    path-name: $[::].spec_name
    path-raw: $[::]
  - type:
    cmd: doctl serverless functions list --output json
    path-id: $[::].id
    path-name: $[::].spec_name
    path-raw: $[::]
    type: application
  - type:
    cmd: doctl databases list --output json
    path-id: $[::].id
    path-name: $[::].name
    path-raw: $[::]
    type: database
  - type:
    cmd: doctl compute domain list --output json
    path-id: $[::].domain
    path-name: $[::].domain
    path-raw: $[::]
    type: objectstorage
  - type:
    cmd: doctl compute firewall list --output json
    path-id: $[::].id
    path-name: $[::].name
    path-raw: $[::]
    type: firewall
  - type:
    cmd: doctl compute reserved-ip list --output json
    path-id: $[::].ip
    path-name: $[::].ip
    path-raw: $[::]
    type: ipaddress
  - type:
    cmd: doctl compute load-balancer list --output json
    path-id: $[::].id
    path-name: $[::].name
    path-raw: $[::]
    type: loadbalancer
  - type:
    cmd: doctl registry list --output json
    path-id: $[::].id
    path-name: $[::].name
    path-raw: $[::]
    type: containerregistry

  #
  # linode
  #
  - type:
    cmd: linode linodes list --json
    path-id: $[::].id
    path-name: $[::].label
    path-raw: $[::]
    generic-type: vm
    type: linode-linode
  - type:
    cmd: linode nodebalancers list --json
    path-id: $[::].id
    path-name: $[::].label
    path-raw: $[::]
    type: loadbalancer
  - type:
    cmd: linode firewalls list --json
    path-id: $[::].id
    path-name: $[::].label
    path-raw: $[::]
    type: firewall
  - type:
    cmd: linode networking ips-list --json
    path-id: $[::].address
    path-name: $[::].address
    path-raw: $[::]
    type: ipaddress
  - type:
    cmd: linode object-storage clusters-list --json
    path-id: $[::].id
    path-name: $[::].domain
    path-raw: $[::]
    type: objectstorage
  - type:
    cmd: linode volumes list --json
    path-id: $[::].id
    path-name: $[::].label
    path-raw: $[::]
    type: disk
  - type:
    cmd: linode vpcs list --json
    path-id: $[::].id
    path-name: $[::].label
    path-raw: $[::]
    type: vpc

  #
  # UpCloud
  #
  - type:
    cmd: upctl server list -o json
    path-id: $.servers[::].uuid
    path-name: $.servers[::].hostname
    path-raw: $.servers[::]
    generic-type: vm
    type: upcloud-server
  - type:
    cmd: upctl storage list -o json
    path-id: $.storages[::].uuid
    path-name: $.storages[::].title
    path-raw: $.storages[::]
    type: objectstorage
  - type:
    cmd: upctl servergroup list -o json
    path-id: $.server_groups[::].uuid
    path-name: $.server_groups[::].title
    path-raw: $.server_groups[::]
    type: servergroup
  - type:
    cmd: upctl database list -o json
    path-id: $.databases[::].uuid
    path-name: $.databases[::].title
    path-raw: $.databases[::]
    type: database
  - type:
    cmd: upctl gateway list -o json
    path-id: $.gateways[::].uuid
    path-name: $.gateways[::].name
    path-raw: $.gateways[::]
    type: gateway
  - type:
    cmd: upctl ip-address list -o json
    path-id: $.ip_addresses.[::].address
    path-name: $.ip_addresses[::].address
    path-raw: $.ip_addresses[::]
    type: ipaddress
  - type:
    cmd: upctl kubernetes list -o json
    path-id: $.[::].uuid
    path-name: $.[::].name
    path-raw: $.[::]
    type: kubernetes
  - type:
    cmd: upctl host list -o json
    path-id: $.hosts[::].id
    path-name: $.hosts[::].description
    path-raw: $.hosts[::]
    type: host
  - type:
    cmd: upctl loadbalancer list -o json
    path-id: $.loadbalancers[::].uuid
    path-name: $.loadbalancers[::].name
    path-raw: $.loadbalancers[::]
    type: loadbalancer
  - type:
    cmd: upctl network list -o json
    path-id: $.networks[::].uuid
    path-name: $.networks[::].name
    path-raw: $.networks[::]
    type: network
  - type:
    cmd: upctl networkpeering list -o json
    path-id: $.networks[::].uuid
    path-name: $.networks[::].name
    path-raw: $.networks[::]
    type: peering
  - type:
    cmd: upctl object-storage list -o json
    path-id: $.object_storages[::].uuid
    path-name: $.object_storages[::].name
    path-raw: $.object_storages[::]
    type: objectstorage
  - type:
    cmd: upctl router list -o json
    path-id: $.routers[::].uuid
    path-name: $.routers[::].name
    path-raw: $.routers[::]
    type: router


details-sources:
  - type: query-details
    when:
      path: "$.type"
      value: "Microsoft.Compute/virtualMachines"
      compare: ne
    cmd: az resource show --ids ${id}
    refresh: self
  # This is details query for VMs only
  - type: query-details
    when:
      path: "$.type"
      value: "Microsoft.Compute/virtualMachines"
    cmd: az vm get-instance-view --ids ${id}
    refresh: self
  # This is details query for any other resources
  - type: query-details
    when:
      path: "$.type"
      value: "Microsoft.Compute/virtualMachines"
      compare: ne
    cmd: az resource show --ids ${id}
    refresh: self

  - type: civo-instance
    cmd: civo instances show ${id} --region ${location} -o json
    refresh: self
  - type: civo-kubernetes
    cmd: civo kubernetes show ${id} --region fra1 --output json
    refresh: self
  - type: doctl-droplet
    cmd: doctl compute droplet get ${id} -o json
    refresh: self
  - type: linode-linode
    cmd: linode linodes view ${id} --json
    refresh: self
  - type: upctl-server
    cmd: upctl server show ${id} -o json
    refresh: self


extractors:

  - type: "Microsoft.Compute/virtualMachines"
    fields:
      state:
        path: "$.instanceView.statuses[?(@.code < 'ProvisioningState')].code"
        map:
          "PowerState/running": started
          "PowerState/stopped": stopped
      size:
        path: "$.hardwareProfile.vmSize"
      size_disk:
        path: "$.storageProfile.osDisk.diskSizeGb"
      location:
        path: "$.location"

  - type: civo-instance
    fields:
      location:
        path: "$.region"
      state:
        path: "$.status"
        map:
          ACTIVE: started
          off: stopped
      size:
        path: "$.size"
      size_cores:
        path: "$.cpu_cores"
      size_memory:
        path: "$.ram_mb"
      size_disk:
        path: "$.disk_gb"
      price:
        path: "$.price_monthly"
      image:
        path: "$.diskimage_id"

  - type: doctl-droplet
    fields:
      state:
        path: "$[0].status"
        map:
          active: started
          off: stopped
      size:
        path: "$[0].size.slug"
      location:
        path: "$[0].region.slug"
      size_cores:
        path: "$[0].size.vcpus"
      size_memory:
        path: "$[0].size.memory"
      size_disk:
        path: "$[0].size.disk"
      price:
        path: "$[0].size.price_monthly"
      image:
        path: "$[0].image.slug"

  - type: linode-linode
    fields:
      state:
        path: "$[0].status"
        map:
          running: started
          offline: stopped
          provisioning: provisioning
      size:
        path: "$[0].type"
      location:
        path: "$[0].region"
      size_cores:
        path: "$[0].specs.vcpus"
      size_memory:
        path: "$[0].specs.memory"
      size_disk:
        path: "$[0].specs.disk"
      image:
        path: "$[0].image"

  - type: upcloud-server
    fields:
      state:
        path: "$.state"
      size:
        path: "$.plan"
      location:
        path: "$.zone"
      size_cores:
        path: "$.core_number"
      size_memory:
        path: "$.memory_amount"
      size_disk:
        path: "$[0].specs.disk"
      image:
        path: "$[0].image"


operations: []
